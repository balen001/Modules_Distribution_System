/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package ukh_modules_distribution_system;

import java.io.*;
import java.util.*;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;





/**
 *
 * @author Balen
 */
public class showInstructorFrame extends javax.swing.JFrame {
    
    static String instructorDir = "./Instructor.txt";  //file directory
    
    ArrayList <Instructor> AllInstructor = new ArrayList <Instructor>(); // to put all instructor data into it
    String tableHeaders [] = new String[] {"Name", "Email" , "Salary", "Address", "Phone", "Practical Hours", "Teaching subjectID"};
    
    
    DefaultTableModel instructorModel;
    int foundIndex;
    
    
    int row;  // to get the row number
    
    // got inspiration from https://www.tutorialspoint.com/how-to-create-defaulttablemodel-which-is-an-implementation-of-tablemodel
    // not copied
    
    
    
    /**
     * Creates new form showlecturerFrame
     */
    public showInstructorFrame() {
        initComponents();
        
        
        
        // we should set the table model directly when the frame appears
        instructorModel = new DefaultTableModel(tableHeaders, 0);
        instructorTbl.setModel(instructorModel);
        
        
        this.setLocationRelativeTo(null); // Make the frame centered to the screen when we opened
        //https://coderanch.com/t/343686/java/setLocationRelativeTo
        getData();
        listInstructor();
        
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        instructorTbl = new javax.swing.JTable();
        saveBtn = new javax.swing.JButton();
        deleteBtn = new javax.swing.JButton();
        searchTxt = new javax.swing.JTextField();
        searchBtn = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jPanel1.setBackground(new java.awt.Color(51, 51, 51));

        instructorTbl = new javax.swing.JTable(){

            public boolean isCellEditable(int row, int column) {
                return false;
            }

        };
        instructorTbl.setForeground(new java.awt.Color(0, 0, 0));
        instructorTbl.setFocusable(false);
        instructorTbl.getTableHeader().setReorderingAllowed(false);
        instructorTbl.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                instructorTblMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(instructorTbl);

        saveBtn.setBackground(new java.awt.Color(51, 0, 255));
        saveBtn.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        saveBtn.setForeground(new java.awt.Color(255, 255, 255));
        saveBtn.setText("Save");
        saveBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                saveBtnActionPerformed(evt);
            }
        });

        deleteBtn.setBackground(new java.awt.Color(153, 0, 0));
        deleteBtn.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        deleteBtn.setForeground(new java.awt.Color(255, 255, 255));
        deleteBtn.setText("Delete");
        deleteBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                deleteBtnActionPerformed(evt);
            }
        });

        searchBtn.setBackground(new java.awt.Color(0, 0, 0));
        searchBtn.setForeground(new java.awt.Color(255, 255, 255));
        searchBtn.setText("Search");
        searchBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                searchBtnActionPerformed(evt);
            }
        });

        jLabel1.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(255, 255, 255));
        jLabel1.setText("Instructor name:");

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane1)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addGap(35, 35, 35)
                .addComponent(saveBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 96, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(41, 41, 41)
                .addComponent(deleteBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 96, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(53, 53, 53)
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(searchTxt, javax.swing.GroupLayout.PREFERRED_SIZE, 152, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 44, Short.MAX_VALUE)
                .addComponent(searchBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 89, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(21, 21, 21))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addGap(0, 37, Short.MAX_VALUE)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(deleteBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(saveBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(searchTxt, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(searchBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel1))
                .addGap(18, 18, 18)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 427, javax.swing.GroupLayout.PREFERRED_SIZE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void instructorTblMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_instructorTblMouseClicked
        // TODO add your handling code here:
    }//GEN-LAST:event_instructorTblMouseClicked

    private void deleteBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_deleteBtnActionPerformed
        
        
        DefaultTableModel tableModel = (DefaultTableModel) instructorTbl.getModel();
        
        if(foundIndex == -1){
        //to delete the row
        if (instructorTbl.getSelectedRowCount() == 1){
        
            // if only a single row selected perform delete
            
            int r = instructorTbl.getSelectedRow();
            
            tableModel.removeRow(r);
            AllInstructor.remove(r);
        
        }
        
        else if (instructorTbl.getSelectedRowCount() == 0) {
        
            // if the table empty (no data) then dislay a message
           
            JOptionPane.showMessageDialog(null, "Nothing is selected for delete");
        }
        
        else {
        // if row is not selected or multiple row selected
            JOptionPane.showMessageDialog(null, "Please select a single row for delete");
        }
        }
        
        
        
        
        //to delete data after search
        else {
            if (instructorTbl.getSelectedRowCount() == 1){
        
            // if only a single row selected perform delete
            int selectedRow = instructorTbl.getSelectedRow();
            
            tableModel.removeRow(selectedRow);
            AllInstructor.remove(foundIndex);
        
        }
        
        else if (instructorTbl.getSelectedRowCount() == 0) {
        
            // if the table empty (no data) then dislay a message
           
            JOptionPane.showMessageDialog(null, "The table is empty");
        }
        
        else {
        // if row is not selected or multiple row selected
            JOptionPane.showMessageDialog(null, "Please select a single row for delete");
        }
            
        }
        
        
        
    }//GEN-LAST:event_deleteBtnActionPerformed

    private void saveBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_saveBtnActionPerformed
        //write into file permenantly
        
        try {
            FileOutputStream fileOutput = new FileOutputStream(instructorDir);
            ObjectOutputStream write = new ObjectOutputStream(fileOutput); 
		
            ArrayList <Instructor> editedInstructor = new ArrayList <Instructor>();
            editedInstructor = AllInstructor;
            
            write.writeObject(editedInstructor);
            write.close();
            JOptionPane.showMessageDialog(null, "Saved successfuly");
       	      
            //write.close();
        } catch (IOException e) {
            
            JOptionPane.showMessageDialog(null, "error");
	}
        
        getData();
        listInstructor();
    }//GEN-LAST:event_saveBtnActionPerformed

    private void searchBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_searchBtnActionPerformed
       
        String searchName = searchTxt.getText();
        foundIndex = -1;
        
        
        if (!searchName.isEmpty()){
        for(int j = 0; j < AllInstructor.size(); j++){
        
                if(AllInstructor.get(j).getNic().equalsIgnoreCase(searchName)){
                    
                    JOptionPane.showMessageDialog(null, "Found!!");
                    foundIndex = j;
                
            }
        
        }
        
        if (foundIndex == -1){
            JOptionPane.showMessageDialog(null, "Not found");
        }
        
        if (foundIndex != -1)
        {
        instructorModel.setRowCount(0); // reset the entire table
        Object[] info = {AllInstructor.get(foundIndex).getNic(), AllInstructor.get(foundIndex).getEmail() , AllInstructor.get(foundIndex).getSalary() , AllInstructor.get(foundIndex).getAddress(), AllInstructor.get(foundIndex).getMobile(),  AllInstructor.get(foundIndex).getPracticalHours(), AllInstructor.get(foundIndex).getSubjectID() };
        instructorModel.addRow(info);
        
        }
        }
        
        else{listInstructor();}
           
    }//GEN-LAST:event_searchBtnActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(showInstructorFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(showInstructorFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(showInstructorFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(showInstructorFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new showInstructorFrame().setVisible(true);
            }
        });
    }
    
    private void getData(){
        
        try {
        
            ObjectInputStream read = new ObjectInputStream(new FileInputStream(instructorDir));
            Object o; // an object of Object class (The parent of all objects)
            
            try{
                o = read.readObject();
                if(o != null)
                AllInstructor = (ArrayList<Instructor>) o;
            }
            catch(IOException | ClassNotFoundException c){
                c.printStackTrace();
                
            }
            
            read.close();
        }
        
        catch(IOException outer){
            outer.printStackTrace();
            
        }
        
        
        
        
        
    
    }
    
    private void listInstructor(){
    
        
        instructorModel.setRowCount(0); // reset the entire table
        
        for(int i = 0 ; i < AllInstructor.size(); i++){
            
            Object[] info = {AllInstructor.get(i).getNic(), AllInstructor.get(i).getEmail() , AllInstructor.get(i).getSalary() , AllInstructor.get(i).getAddress(), AllInstructor.get(i).getMobile(),  AllInstructor.get(i).getPracticalHours(), AllInstructor.get(i).getSubjectID()};
        
            instructorModel.addRow(info);
                
        }
        
        foundIndex = -1; // reset search result with update
        
    
    }
    
    

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton deleteBtn;
    private javax.swing.JTable instructorTbl;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JButton saveBtn;
    private javax.swing.JButton searchBtn;
    private javax.swing.JTextField searchTxt;
    // End of variables declaration//GEN-END:variables
}
